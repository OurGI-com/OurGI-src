
#user  nobody;
worker_processes  auto;
worker_rlimit_nofile   65000;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  65000;
}

stream {
    lua_load_resty_core off;
    server {
        listen 21405;

        content_by_lua_block {
            local sock = assert(ngx.req.socket(true))
            sock:settimeouts(10000, 10000, 10000)
            while true do
                local data = sock:receive()  -- read a line from downstream
                if data == "thunder!" then
                    ngx.print("flash!")  -- output data
                else
                    ngx.say("boom!")
                end
            end
        }
    }
}

http
{
    include       mime.types;
    #default_type  application/octet-stream;
    default_type    "text/html";
    charset          utf-8;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    access_log /dev/null;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    client_header_timeout 30;
    client_body_timeout   30;
    send_timeout          30;
    fastcgi_connect_timeout 320;
    fastcgi_send_timeout    320;
    fastcgi_read_timeout    320;

    #gzip  on;      #on in outer host,  off in inner host
    lua_package_path "${prefix}conf/lua_libs/?.lua;;";

    init_by_lua_block
    {
        http=require "http"
        fastcgihttp=require "fastcgihttp"

        function fastcgi_pass(fastcgi_script_name)
            ngx.req.read_body()
            local fcgic = fastcgihttp.new()
            fcgic:set_timeout(2000)
            fcgic:connect("unix:/tmp/php-fpm.sock")
            fcgic:set_timeout(60000)

            local req={fastcgi = {
                                     REQUEST_URI       = ngx.var.request_uri,
                                     SCRIPT_FILENAME   = ngx.var.document_root..fastcgi_script_name,
                                     SCRIPT_NAME       = fastcgi_script_name,
                                     REQUEST_METHOD    = ngx.var.request_method,
                                     QUERY_STRING      = ngx.var.args,
                                     CONTENT_TYPE      = ngx.var.content_type or "",
                                     CONTENT_LENGTH    = ngx.var.content_length or "",
                                     DOCUMENT_ROOT     = ngx.var.document_root,
                                     SERVER_PROTOCOL   = ngx.var.server_protocol,
                                     GATEWAY_INTERFACE = "CGI/1.1",
                                     SERVER_SOFTWARE   = "nginx/"..ngx.var.nginx_version,
                                     REMOTE_ADDR       = ngx.var.remote_addr,
                                     REMOTE_PORT       = ngx.var.remote_port,
                                     SERVER_ADDR       = ngx.var.server_addr,
                                     SERVER_PORT       = ngx.var.server_port,
                                     SERVER_NAME       = ngx.var.server_name,
                                     REQUEST_ID        = ngx.var.req_id
                                 },
                       headers = ngx.req.get_headers(),
                       body    = ngx.req.get_body_data(),
                      }
            local res, err = fcgic:request(req)
            fcgic:close()
            return res, err
        end

        function fastcgi_pass_vars(fastcgi_script_name, request_uri, args, request_method, body)
            ngx.req.read_body()
            local fcgic = fastcgihttp.new()
            fcgic:set_timeout(2000)
            fcgic:connect("unix:/tmp/php-fpm.sock")
            fcgic:set_timeout(60000)

            local req={fastcgi = {
                                     REQUEST_URI       = request_uri,
                                     SCRIPT_FILENAME   = ngx.var.document_root..fastcgi_script_name,
                                     SCRIPT_NAME       = fastcgi_script_name,
                                     REQUEST_METHOD    = request_method,
                                     QUERY_STRING      = args,
                                     CONTENT_TYPE      = ngx.var.content_type or "",
                                     CONTENT_LENGTH    = string.len(body),
                                     DOCUMENT_ROOT     = ngx.var.document_root,
                                     SERVER_PROTOCOL   = ngx.var.server_protocol,
                                     GATEWAY_INTERFACE = "CGI/1.1",
                                     SERVER_SOFTWARE   = "nginx/"..ngx.var.nginx_version,
                                     REMOTE_ADDR       = ngx.var.remote_addr,
                                     REMOTE_PORT       = ngx.var.remote_port,
                                     SERVER_ADDR       = ngx.var.server_addr,
                                     SERVER_PORT       = ngx.var.server_port,
                                     SERVER_NAME       = ngx.var.server_name,
                                     REQUEST_ID        = ngx.var.req_id
                                 },
                       headers = ngx.req.get_headers(),
                       body    = body,
                      }
            local res, err = fcgic:request(req)
            fcgic:close()
            return res, err
        end

        function var_export(obj)
            local getIndent, quoteStr, wrapKey, wrapVal, isArray, dumpObj
            getIndent = function(level)
                return string.rep("\t", level)
            end
            quoteStr = function(str)
                str = string.gsub(str, "[%c\\\"]", {
                    ["\t"] = "\\t",
                    ["\r"] = "\\r",
                    ["\n"] = "\\n",
                    ["\""] = "\\\"",
                    ["\\"] = "\\\\",
                })
                return '"' .. str .. '"'
            end
            wrapKey = function(val)
                if type(val) == "number" then
                    return "[" .. val .. "]"
                elseif type(val) == "string" then
                    return "[" .. quoteStr(val) .. "]"
                else
                    return "[" .. tostring(val) .. "]"
                end
            end
            wrapVal = function(val, level)
                if type(val) == "table" then
                    return dumpObj(val, level)
                elseif type(val) == "number" then
                    return val
                elseif type(val) == "string" then
                    return quoteStr(val)
                else
                    return tostring(val)
                end
            end
            local isArray = function(arr)
                local count = 0
                for k, v in pairs(arr) do
                    count = count + 1
                end
                for i = 1, count do
                    if arr[i] == nil then
                        return false
                    end
                end
                return true, count
            end
            dumpObj = function(obj, level)
                if type(obj) ~= "table" then
                    return wrapVal(obj)
                end
                level = level + 1
                local tokens = {}
                tokens[#tokens + 1] = "{"
                local ret, count = isArray(obj)
                if ret then
                    for i = 1, count do
                        tokens[#tokens + 1] = getIndent(level) .. wrapVal(obj[i], level) .. ","
                    end
                else
                    for k, v in pairs(obj) do
                        tokens[#tokens + 1] = getIndent(level) .. wrapKey(k) .. " = " .. wrapVal(v, level) .. ","
                    end
                end
                tokens[#tokens + 1] = getIndent(level - 1) .. "}"
                return table.concat(tokens, "\n")
            end
            return dumpObj(obj, 0)
        end

        function explode(sp,str,limit)
            local r={};
            if str=="" or str==nil then
                return r;
            end
            local pos=string.find(str,sp);
            local last=1;
            if type(limit) == "number" then
                limit=limit-1;
            end
            while pos ~= nil and limit ~=0 do
                r[#r+1]=string.sub(str,last,pos-1);
                last=pos+1;
                if limit ~=nil then
                    limit=limit-1;
                end
                pos=string.find(str,sp,pos+1);
            end
            r[#r+1]=string.sub(str,last);
            return r;
        end

        function apc_save(key, val, ttl)
            local res=fastcgi_pass_vars('/internal.php', '/internal.php', "action=apc_save&key="..ngx.escape_uri(key).."&ttl="..ngx.escape_uri(ttl), 'POST', val);
            return res.body;
        end

        function apc_clear(keys)
            local res=fastcgi_pass_vars('/internal.php', '/internal.php', "action=apc_clear&keys="..ngx.escape_uri(keys), 'GET', '');
            return res.body;
        end
    }

    init_worker_by_lua_block
    {
        local handler;
        handler=function(premature)
            if premature then
                return
            end

            local my_fastcgi_pass_vars=function(fastcgi_script_name, request_uri, args, request_method, body)
                --ngx.req.read_body()
                local fcgic1 = fastcgihttp.new()
                fcgic1:set_timeout(2000)
                fcgic1:connect("unix:/tmp/php-fpm.sock")
                fcgic1:set_timeout(5000)

                local req={fastcgi = {
                                         REQUEST_URI       = request_uri,
                                         SCRIPT_FILENAME   = "/usr/local/nginx/wwwroot"..fastcgi_script_name,
                                         SCRIPT_NAME       = fastcgi_script_name,
                                         REQUEST_METHOD    = request_method,
                                         QUERY_STRING      = args,
                                         --CONTENT_TYPE      = ngx.var.content_type or "",
                                         CONTENT_LENGTH    = string.len(body),
                                         DOCUMENT_ROOT     = "/usr/local/nginx/wwwroot",
                                         --SERVER_PROTOCOL   = ngx.var.server_protocol,
                                         GATEWAY_INTERFACE = "CGI/1.1",
                                         --SERVER_SOFTWARE   = "nginx/"..ngx.var.nginx_version,
                                         --REMOTE_ADDR       = ngx.var.remote_addr,
                                         --REMOTE_PORT       = ngx.var.remote_port,
                                         --SERVER_ADDR       = ngx.var.server_addr,
                                         --SERVER_PORT       = ngx.var.server_port,
                                         --SERVER_NAME       = ngx.var.server_name,
                                         --REQUEST_ID        = ngx.var.req_id
                                     },
                           --headers = ngx.req.get_headers(),
                           body    = body,
                          }
                local res, err = fcgic1:request(req)
                --ngx.log(ngx.ERR, "====after request");
                fcgic1:close()
                return res, err
            end

            my_fastcgi_pass_vars('/internal.php', '/internal.php', "action=crontab&timestamp="..os.time(), 'GET', '');
        end

        --only start from worker id 0
        if ngx.worker.id()==0 then
            ngx.timer.every(10, handler)    --run every 10 seconds
        end
    }

    #outer host:
    server
    {
        listen     21404    default_server;

        location ^~ /internal
        {
            rewrite_by_lua '
                ngx.print("invalid url");
                ngx.exit(200);
            ';
        }

        location /
        {
            proxy_set_header  Request-Host $host;
            proxy_set_header  X-Real-IP $remote_addr;
            proxy_set_header  X-Real-Port $remote_port;
            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header  X-Client-IP $http_x_real_ip;
            proxy_pass http://127.0.0.1/;
            proxy_read_timeout 325;

            access_log  logs/access.log  main;
        }
    }

    #inner host:
    server
    {
        #内部host里的内部location用统一前缀比如"internal_", 在外部host里统一拒绝该前缀的请求, 其他请求则可以直接穿透到内部host
        #外层host不需要单独文件了, 一段server应该就能搞定, relayworker等复杂逻辑都在内层host
        #避免写proxy_pass, capture, location, rewrite(set_uri) 应该用lua函数替代: nginx笔记里有 lua fastcgi和lua http

        listen       127.0.0.1:80;
        root         /usr/local/nginx/wwwroot;

        #maybe there's a bug in nginx 1.15.12, ngx.var.request_id changing every calling, so use ngx.var.req_id to fix its value, $_SERVER['REQUEST_ID'] keeps its name in php
        set_by_lua   $req_id 'return ngx.var.req_id~="" and ngx.var.req_id or (ngx.var.hostname or "").."-"..ngx.worker.pid().."-"..ngx.var.request_id';

        location ^~ /null
        {
            rewrite_by_lua '
                ngx.print("null");
                ngx.exit(200);
            ';
        }

        location ^~   /
        {
            #rewrite_by_lua 'local a=1';
            #access_by_lua 'local a=1';
            rewrite_by_lua_block
            {
                --ngx.log(ngx.ERR, "====request id:"..ngx.var.req_id);
                --require luajit or lua 5.2 to support "goto"
                ngx.req.read_body();
                local step_count=0
                ::continue::
                step_count=step_count+1
                if step_count>10 then     --one crawl,  one report, 15 crawls, 30 steps
                    ngx.status = 500
                    ngx.say("Exceeded max step count!")
                    ngx.exit(ngx.status)
                end

                --pass request to php-fpm
                --for security, only allow access index.php
                --ngx.var.fsn, ngx.var.fastcgi_script_name
                local res=fastcgi_pass('/index.php')    --status, body, headers, has_body

                if not res then
                    ngx.log(ngx.ERR, 'fastcgi_pass()/index.php failed');
                    ngx.exit(500)
                else
                    if res.headers["Relay-Worker-Fetch-Host"]~=nil then
                        if res.headers["Relay-Worker-Delay"]>"0" then
                            ngx.sleep(res.headers["Relay-Worker-Delay"])
                        end

                        --fetching
                        local host_and_proxy=explode("|", res.headers["Relay-Worker-Fetch-Host"], 2)
                        res.headers["Relay-Worker-Fetch-Host"]=host_and_proxy[1]
                        local pos,pos_end=string.find(res.headers["Relay-Worker-Fetch-Host"], ":", 1, true)
                        local rhost=pos and string.sub(res.headers["Relay-Worker-Fetch-Host"], 1, pos-1) or res.headers["Relay-Worker-Fetch-Host"]
                        local rport=pos and string.sub(res.headers["Relay-Worker-Fetch-Host"], pos+1) or "80"

                        local httpc = http.new()
                        httpc:set_timeout(res.headers["Relay-Worker-Fetch-Timeout"]*1000);
                        if host_and_proxy[2] then
                            local proxy=explode(":", host_and_proxy[2], 2);
                            ok, err = httpc:connect(proxy[1], proxy[2])
                        else
                            ok, err = httpc:connect(rhost, rport)
                            if rport=="443" then
                                --ngx.log(ngx.ERR, "================handshake")
                                ok, err = httpc:ssl_handshake(nil, rhost, false)
                            end
                        end
                        if not ok then
                            --ngx.log(ngx.ERR, "================httpc:connect failed"..rhost)
                            if res.headers["Relay-Worker-Delay"]=="-1" then
                                ngx.print("")
                                ngx.exit(200)
                            else
                                apc_save("relay-worker-response-"..ngx.var.req_id, "", 300);
                                goto continue
                            end
                        end
                        if host_and_proxy[2] then
                            local apikey=string.match(ngx.var.request_uri, "&trg_api=(.-)&")  or string.match(ngx.var.request_uri, "%%26trg_api%%3D(.-)%%26") or "";
                            local query_id=string.match(ngx.var.request_uri, "%%22query_id%%22%%3A%%22(.-)%%22") or ngx.var.req_id;
                            local did=string.match(ngx.var.request_uri, "&openUDID=(.-)&")  or string.match(ngx.var.request_uri, "%%26openUDID%%3D(.-)%%26") or "";
                            httpc.sock:send("CONNECT "..rhost..":"..rport.." HTTP/1.1".."\r\n".."X-Query-Id: "..query_id.. "\r\n" .. "X-Api-Key: " .. apikey .."\r\n" .. "X-Did: " .. did .."\r\n")
                            --ngx.log(ngx.ERR, "==========="..host_and_proxy[1]..'|'..host_and_proxy[2]..' '..ngx.var.request_uri.."===X-Query-Id: "..query_id.."\r\n".."X-Did: " .. did .."\r\n")
                            ok, err = httpc.sock:receive("*l")  --HTTP/1.1 200 Connection established
                            ok, err = httpc.sock:receive("*l")  --\r\n
                            ok, err = httpc:ssl_handshake(nil, rhost, true)
                            if not ok then
                                --ngx.log(ngx.ERR, "https proxy handshake failed or timeout")
                                apc_save("relay-worker-response-"..ngx.var.req_id, "", 300);
                                goto continue
                            end
                        end
                        httpc.sock:send(res.body)
                        --ngx.log(ngx.ERR, "===========httpc.sock:send:"..string.sub(res.body, 0, 100))

                        if res.headers["Relay-Worker-Delay"]=="-1" then
                            --rbody=httpc.sock:receive("*a")
                            --ngx.print(rbody)
                            -- 返回ok用于模调统计
                            httpc:set_keepalive(30000, 200)    --close the object and put connection into cosocket pool
                            ngx.print("ok")
                            ngx.exit(200)
                        end
                        local resp=httpc:read_response({headers={}})
                        if not resp then
                            --ngx.log(ngx.ERR, "================httpc:read_response:failed");
                            apc_save("relay-worker-response-"..ngx.var.req_id, "", 300);
                            goto continue
                        end
                        local rbody, err=resp:read_body()
                        --ngx.log(ngx.ERR, "===========rbody:" .. rbody)
                        local response="HTTP/1.1 "..resp.status.." STATUS\r\n"
                        for k, v in pairs(resp.headers) do
                            if string.lower(k)~="transfer-encoding" then
                                if type(v)=="table" then
                                    for kk, vv in pairs(v) do
                                        response=table.concat({response, k, ": ", vv, "\r\n"})
                                    end
                                else
                                    response=table.concat({response, k, ": ", v, "\r\n"})
                                end
                            end
                        end
                        response=table.concat({response, "\r\n", rbody})
                        --ngx.log(ngx.ERR, response)

                        httpc:close()                        --代理池暂不支持http connect共用连接, 只能每次断开重连
                        --httpc:set_keepalive(30000, 200)    --close the object and put connection into cosocket pool

                        apc_save("relay-worker-response-"..ngx.var.req_id, response, 300);
                        goto continue
                    else
                        if res.headers["Supc-Sleep-After"] ~=nil then
                            ngx.sleep(res.headers["Supc-Sleep-After"])
                            --ngx.log(ngx.ERR,"Supc-Sleep-After:"..res.headers["Supc-Sleep-After"]);
                        end
                        if step_count>1 then
                            apc_clear("relay-worker-step-"..ngx.var.req_id..",relay-worker-response-"..ngx.var.req_id..",relay-worker-globals-"..ngx.var.req_id)
                        end
                        for k,v in pairs(res.headers) do
                            ngx.header[k] = v
                        end
                        ngx.status = res.status
                        ngx.print(res.body)       --don not use ngx.say(), appended a new line at end
                        ngx.exit(ngx.status)
                    end
                end
            }
        }

    }

}
